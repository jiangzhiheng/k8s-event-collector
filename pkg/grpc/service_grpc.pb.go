// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: pkg/grpc/service.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SearchEventServiceClient is the client API for SearchEventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SearchEventServiceClient interface {
	GetResourceEvents(ctx context.Context, in *DescribeEventRequest, opts ...grpc.CallOption) (*DescribeEventResponse, error)
}

type searchEventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSearchEventServiceClient(cc grpc.ClientConnInterface) SearchEventServiceClient {
	return &searchEventServiceClient{cc}
}

func (c *searchEventServiceClient) GetResourceEvents(ctx context.Context, in *DescribeEventRequest, opts ...grpc.CallOption) (*DescribeEventResponse, error) {
	out := new(DescribeEventResponse)
	err := c.cc.Invoke(ctx, "/grpc.SearchEventService/GetResourceEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SearchEventServiceServer is the server API for SearchEventService service.
// All implementations must embed UnimplementedSearchEventServiceServer
// for forward compatibility
type SearchEventServiceServer interface {
	GetResourceEvents(context.Context, *DescribeEventRequest) (*DescribeEventResponse, error)
	mustEmbedUnimplementedSearchEventServiceServer()
}

// UnimplementedSearchEventServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSearchEventServiceServer struct {
}

func (UnimplementedSearchEventServiceServer) GetResourceEvents(context.Context, *DescribeEventRequest) (*DescribeEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceEvents not implemented")
}
func (UnimplementedSearchEventServiceServer) mustEmbedUnimplementedSearchEventServiceServer() {}

// UnsafeSearchEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SearchEventServiceServer will
// result in compilation errors.
type UnsafeSearchEventServiceServer interface {
	mustEmbedUnimplementedSearchEventServiceServer()
}

func RegisterSearchEventServiceServer(s grpc.ServiceRegistrar, srv SearchEventServiceServer) {
	s.RegisterService(&SearchEventService_ServiceDesc, srv)
}

func _SearchEventService_GetResourceEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchEventServiceServer).GetResourceEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.SearchEventService/GetResourceEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchEventServiceServer).GetResourceEvents(ctx, req.(*DescribeEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SearchEventService_ServiceDesc is the grpc.ServiceDesc for SearchEventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SearchEventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.SearchEventService",
	HandlerType: (*SearchEventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetResourceEvents",
			Handler:    _SearchEventService_GetResourceEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/grpc/service.proto",
}
